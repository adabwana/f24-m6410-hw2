{"title":"Question 3","markdown":{"yaml":{"format":{"html":{"toc":true,"toc-depth":3,"theme":"cosmo","number-sections":false,"output-file":"assignments.hw2.q3.html"}},"fontsize":"0.9em","code-block-background":true,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"toc-title-numbers":false,"number-depth":0},"headingText":"Question 3","containsRefs":false,"markdown":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw2.q3_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw2.q3_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw2.q3\n  (:require\n    [assignments.hw2.utils :refer :all]\n    [clojure.set :as set]\n    [fastmath.core :as m]))\n```\n:::\n\n\n---\n\n#### *3) Find two sigma fields with probability assignments for the sample space 立 = {1, 2, 3}.*\n\nA sigma field (also known as a sigma-algebra) is a collection of subsets of the sample space that satisfies certain properties. For 立 = {1, 2, 3}, we can define two different sigma fields:\n\n**Sigma Field 1: Trivial Sigma Field**\n\nProbability assignment for the trivial sigma field:\n\nLet's verify that these sigma fields satisfy the required properties:\n\n\n::: {.sourceClojure}\n```clojure\n(defn verify-sigma-field [sigma-field]\n  (and\n    ; Contains empty set and entire sample space\n    (contains? sigma-field #{})\n    (contains? sigma-field #{1 2 3})\n    ; Closed under complementation\n    (every? #(contains? sigma-field (set/difference #{1 2 3} %)) sigma-field)\n    ; Closed under countable unions (for finite sets, this is equivalent to being closed under all unions)\n    (every? #(contains? sigma-field (apply set/union %))\n            (power-set sigma-field))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(let [trivial-sigma-field #{#{} #{1 2 3}}\n      verified? (verify-sigma-field trivial-sigma-field)]\n  (answer (str\n            \"Trivial sigma field is valid: \"\n            verified?)))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Trivial sigma field is valid: true**</span>\n\nLet's also verify that the probability assignments are valid:\n\n\n::: {.sourceClojure}\n```clojure\n(defn verify-prob-assign [prob-assignment sample-space]\n  (let [power-set (power-set sample-space)\n        singleton-events (set (map #(set [%]) sample-space))\n        singleton-probs (map #(get prob-assignment % 0.0) singleton-events)\n        includes-singletons? (some #(contains? prob-assignment %) singleton-events)]\n    (and\n      ; All probabilities are between 0 and 1\n      (every? #(<= 0 % 1) (vals prob-assignment))\n      ; All sets in the probability assignment are in the power set\n      (every? #(contains? power-set %) (keys prob-assignment))\n      ; Probability of the empty set is 0\n      (m/approx-eq 0.0 (get prob-assignment #{} 0.0))\n      ; Probability of the entire sample space is 1\n      (m/approx-eq 1.0 (get prob-assignment sample-space))\n      ; If singleton events are included, sum of their probabilities equals 1\n      (or (not includes-singletons?)\n          (m/approx-eq 1.0 (reduce + singleton-probs))))))\n```\n:::\n\n\nProbability assignment verification results:\n\n\n::: {.sourceClojure}\n```clojure\n(let [sample-space #{1 2 3}\n      trivial-probs {#{}      0.0\n                     #{1 2 3} 1.0}\n      verified? (verify-prob-assign trivial-probs sample-space)]\n  (answer (str\n            \"Trivial sigma field probability assignment is valid: \"\n            verified?)))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Trivial sigma field probability assignment is valid: true**</span>\n\n**Sigma Field 2: Power Set**\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn power-set\n    \"Returns the power set of a given collection (set or vector).\"\n    [coll]\n    (set (map set (combo/subsets (seq coll))))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def power-set-sigma-field\n  (power-set #{1 2 3}))\n```\n:::\n\n\nProbability assignment for the power set sigma field (example):\n\n\n::: {.sourceClojure}\n```clojure\n(let [verified? (verify-sigma-field power-set-sigma-field)]\n  (answer (str\n            \"Power set sigma field is valid: \"\n            verified?)))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Power set sigma field is valid: true**</span>\n\n\n::: {.sourceClojure}\n```clojure\n(let [sample-space #{1 2 3}\n      power-set-probs\n      {#{}      0.0\n       #{1}     0.3\n       #{2}     0.3\n       #{3}     0.4\n       #{1 2}   0.6\n       #{1 3}   0.7\n       #{2 3}   0.7\n       #{1 2 3} 1.0}\n      verified? (verify-prob-assign power-set-probs sample-space)]\n  (answer (str\n            \"Power set sigma field probability assignment is valid: \"\n            verified?)))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Power set sigma field probability assignment is valid: true**</span>\n\nThese sigma fields and their respective probability assignments satisfy the required properties of sigma fields and probability measures\n\nThe trivial sigma field satisfies the properties because:\n1. It contains the empty set and the entire sample space.\n2. The complement of the empty set is the entire sample space, and vice versa.\n3. Any union of these sets is either the empty set or the entire sample space.\n\nThe power set sigma field satisfies the properties because:\n1. It contains all possible subsets of the sample space, including the empty set and the entire sample space.\n2. For any set in the power set, its complement is also in the power set.\n3. Any union of sets in the power set is also in the power set.\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw2/blob/master/src/assignments/hw2/q3.clj\">src/assignments/hw2/q3.clj</a></small></small></pre></div>\n```\n","srcMarkdownNoYaml":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw2.q3_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw2.q3_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw2.q3\n  (:require\n    [assignments.hw2.utils :refer :all]\n    [clojure.set :as set]\n    [fastmath.core :as m]))\n```\n:::\n\n\n## Question 3\n---\n\n#### *3) Find two sigma fields with probability assignments for the sample space 立 = {1, 2, 3}.*\n\nA sigma field (also known as a sigma-algebra) is a collection of subsets of the sample space that satisfies certain properties. For 立 = {1, 2, 3}, we can define two different sigma fields:\n\n**Sigma Field 1: Trivial Sigma Field**\n\nProbability assignment for the trivial sigma field:\n\nLet's verify that these sigma fields satisfy the required properties:\n\n\n::: {.sourceClojure}\n```clojure\n(defn verify-sigma-field [sigma-field]\n  (and\n    ; Contains empty set and entire sample space\n    (contains? sigma-field #{})\n    (contains? sigma-field #{1 2 3})\n    ; Closed under complementation\n    (every? #(contains? sigma-field (set/difference #{1 2 3} %)) sigma-field)\n    ; Closed under countable unions (for finite sets, this is equivalent to being closed under all unions)\n    (every? #(contains? sigma-field (apply set/union %))\n            (power-set sigma-field))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(let [trivial-sigma-field #{#{} #{1 2 3}}\n      verified? (verify-sigma-field trivial-sigma-field)]\n  (answer (str\n            \"Trivial sigma field is valid: \"\n            verified?)))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Trivial sigma field is valid: true**</span>\n\nLet's also verify that the probability assignments are valid:\n\n\n::: {.sourceClojure}\n```clojure\n(defn verify-prob-assign [prob-assignment sample-space]\n  (let [power-set (power-set sample-space)\n        singleton-events (set (map #(set [%]) sample-space))\n        singleton-probs (map #(get prob-assignment % 0.0) singleton-events)\n        includes-singletons? (some #(contains? prob-assignment %) singleton-events)]\n    (and\n      ; All probabilities are between 0 and 1\n      (every? #(<= 0 % 1) (vals prob-assignment))\n      ; All sets in the probability assignment are in the power set\n      (every? #(contains? power-set %) (keys prob-assignment))\n      ; Probability of the empty set is 0\n      (m/approx-eq 0.0 (get prob-assignment #{} 0.0))\n      ; Probability of the entire sample space is 1\n      (m/approx-eq 1.0 (get prob-assignment sample-space))\n      ; If singleton events are included, sum of their probabilities equals 1\n      (or (not includes-singletons?)\n          (m/approx-eq 1.0 (reduce + singleton-probs))))))\n```\n:::\n\n\nProbability assignment verification results:\n\n\n::: {.sourceClojure}\n```clojure\n(let [sample-space #{1 2 3}\n      trivial-probs {#{}      0.0\n                     #{1 2 3} 1.0}\n      verified? (verify-prob-assign trivial-probs sample-space)]\n  (answer (str\n            \"Trivial sigma field probability assignment is valid: \"\n            verified?)))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Trivial sigma field probability assignment is valid: true**</span>\n\n**Sigma Field 2: Power Set**\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn power-set\n    \"Returns the power set of a given collection (set or vector).\"\n    [coll]\n    (set (map set (combo/subsets (seq coll))))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def power-set-sigma-field\n  (power-set #{1 2 3}))\n```\n:::\n\n\nProbability assignment for the power set sigma field (example):\n\n\n::: {.sourceClojure}\n```clojure\n(let [verified? (verify-sigma-field power-set-sigma-field)]\n  (answer (str\n            \"Power set sigma field is valid: \"\n            verified?)))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Power set sigma field is valid: true**</span>\n\n\n::: {.sourceClojure}\n```clojure\n(let [sample-space #{1 2 3}\n      power-set-probs\n      {#{}      0.0\n       #{1}     0.3\n       #{2}     0.3\n       #{3}     0.4\n       #{1 2}   0.6\n       #{1 3}   0.7\n       #{2 3}   0.7\n       #{1 2 3} 1.0}\n      verified? (verify-prob-assign power-set-probs sample-space)]\n  (answer (str\n            \"Power set sigma field probability assignment is valid: \"\n            verified?)))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Power set sigma field probability assignment is valid: true**</span>\n\nThese sigma fields and their respective probability assignments satisfy the required properties of sigma fields and probability measures\n\nThe trivial sigma field satisfies the properties because:\n1. It contains the empty set and the entire sample space.\n2. The complement of the empty set is the entire sample space, and vice versa.\n3. Any union of these sets is either the empty set or the entire sample space.\n\nThe power set sigma field satisfies the properties because:\n1. It contains all possible subsets of the sample space, including the empty set and the entire sample space.\n2. For any set in the power set, its complement is also in the power set.\n3. Any union of sets in the power set is also in the power set.\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw2/blob/master/src/assignments/hw2/q3.clj\">src/assignments/hw2/q3.clj</a></small></small></pre></div>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":false,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"output-file":"assignments.hw2.q3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","fontsize":"0.9em","code-block-background":true,"toc-title-numbers":false,"number-depth":0},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}