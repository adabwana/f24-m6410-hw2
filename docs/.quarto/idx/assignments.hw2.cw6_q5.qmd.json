{"title":"EXTRA: CW6 Q5","markdown":{"yaml":{"format":{"html":{"toc":true,"toc-depth":3,"theme":"cosmo","number-sections":false,"output-file":"assignments.hw2.cw6_q5.html"}},"fontsize":"0.9em","code-block-background":true,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"toc-title-numbers":false,"number-depth":0},"headingText":"EXTRA: CW6 Q5","containsRefs":false,"markdown":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw2.cw6_q5_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw2.cw6_q5_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw2.cw6-q5\n  (:require\n    [assignments.hw2.utils :refer :all]\n    [scicloj.kindly.v4.kind :as kind]))\n```\n:::\n\n\n---\n\n#### *5) Your phone rings 12 times each week, the calls being randomly distributed among 7 days. What is the probability that you get at least one call each day?*\n\nThis problem is equivalent to the Coupon collector's problem, as described in the [MathStackExchange answer](https://math.stackexchange.com/questions/2421875/what-is-the-probability-i-get-at-least-one-call-each-day-if-my-telephone-rings). It can be thought of as 'the probability that a random 12-letter word written with a 7-letter alphabet contains all 7 letters.'\n\n**1. Calculate the binomial coefficient (n choose k):**\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn nck\n    \"Calculates the binomial coefficient (n choose k) using iterative and recusive method.\n   n: total number of items\n   k: number of items to choose\"\n    [n k]\n    (if (or (< k 0) (> k n))\n      0\n      (let [k (min k (- n k))]                              ; Take advantage of symmetry\n        (loop [result 1N, i 0]\n          (if (= i k)\n            result\n            (recur\n              (/ (* result (- n i)) (inc i))\n              (inc i))))))))\n```\n:::\n\n\n**2. Calculate the inclusion-exclusion terms:**\n\n\n::: {.sourceClojure}\n```clojure\n(defn calculate-inclusion-exclusion-terms\n  \"Calculates the terms for the inclusion-exclusion principle, corresponding to the formula:\n   7^12 - (7c6)6^12 + (7c5)5^12 - (7c4)4^12 + (7c3)3^12 - (7c2)2^12 + (7c1)1^12\n   \n   num-items: Number of items to distribute (e.g., calls)\n   num-groups: Number of groups to distribute into (e.g., days)\n   \n   Returns a sequence of terms for the inclusion-exclusion sum.\"\n  [num-items num-groups]\n  (map (fn [k]\n         (let [sign (if (odd? k) 1 -1)\n               combinations (nck num-groups k)              ; This computes (7 choose k)\n               ways (Math/pow (- num-groups k) num-items)]  ; This computes (7-k)^12\n           (* sign combinations ways)))\n       (range 1 (inc num-groups))))\n```\n:::\n\n\nExplanation of `calculate-inclusion-exclusion-terms`:\n     \n1. We iterate over k from 1 to num-groups, representing the number of groups not receiving any item.\n2. For each k, we calculate:\n   - `(nck num-groups k)`: The number of ways to choose k groups out of num-groups.\n   - `(Math/pow (- num-groups k) num-items)`: The number of ways to distribute num-items to the remaining (num-groups - k) groups.\n   - `(if (odd? k) 1 -1)`: Alternating sign for the inclusion-exclusion principle.\n3. The product of these three factors gives us each term in the inclusion-exclusion sum.\n\n**Examples of `calculate-inclusion-exclusion-terms`:**\n\n***Example 1:*** 3 items, 2 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [terms (calculate-inclusion-exclusion-terms 3 2)]\n  (kind/md (str \"Terms: \" (vec terms))))\n```\n:::\n\n\nTerms: [2.0 -0.0]\n\n**Explanation:**\n- For k=1: (2 choose 1) * 1^3 * 1 = 2\n- For k=2: (2 choose 2) * 0^3 * -1 = 0\n\n These terms correspond to the inclusion-exclusion principle as described in the MathStackExchange solution. Here, we're calculating the probability of not using all groups (days/letters), which we'll later subtract from 1 to get the desired probability.\n\n***Example 2:*** 4 items, 3 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [terms (calculate-inclusion-exclusion-terms 4 3)]\n  (kind/md (str \"Terms: \" (vec terms))))\n```\n:::\n\n\nTerms: [48.0 -3.0 0.0]\n\n**Explanation:**\n     \n- For k=1: (3 choose 1) * 2^4 * 1 = 48\n- For k=2: (3 choose 2) * 1^4 * -1 = -3\n- For k=3: (3 choose 3) * 0^4 * 1 = 0\n\n These terms directly relate to the MathStackExchange solution's formula: \n$7^{12} - \\binom{7}{6}6^{12} + \\binom{7}{5}5^{12} - ... + \\binom{7}{1}1^{12}$. In our function:\n     \n- (3 choose k) corresponds to $\\binom{7}{k}$ in the solution\n- $(3-k)^4$ corresponds to $k^{12}$ in the solution (where k is the complement)\n- The alternating signs match the solution's inclusion-exclusion principle\n\nOur function generalizes this approach for any number of items (calls/letters) and groups (days/alphabet letters).\n\n**3. Calculate the probability using inclusion-exclusion:**\n\n\n::: {.sourceClojure}\n```clojure\n(defn coupon-probability\n  \"Calculates the probability that all `num-groups` (e.g., days) will be used\n   when distributing `num-items` (e.g., calls) using the inclusion-exclusion principle.\"\n  [num-items num-groups]\n  (let [terms (calculate-inclusion-exclusion-terms num-items num-groups)\n        total-ways (Math/pow num-groups num-items)\n        excluded-ways (reduce + terms)\n        probability (- 1 (/ excluded-ways total-ways))]\n    probability))\n```\n:::\n\n\nExplanation of `coupon-probability`:\n     \n1. We calculate the inclusion-exclusion terms using our `calculate-inclusion-exclusion-terms` function.\n2. total-ways represents the total number of ways to distribute num-items among num-groups.\n3. We sum up the terms and divide by total-ways to get the probability of not using all groups.\n4. Finally, we subtract this from 1 to get the probability of using all groups.\n\nExamples of `coupon-probability`:\n\n***Example 1:*** 3 items, 2 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [prob (coupon-probability 3 2)]\n  (kind/md (str \"Probability: \" (format \"%.4f\" prob))))\n```\n:::\n\n\nProbability: 0.7500\n\n**Explanation:**\n     \n- Total ways: $2^3 = 8$\n- Sum of terms: 2 (from previous example)\n- $Probability = 1 - (2 / 8) = 0.75$\nThis means there's a 75% chance of using both groups having at least one item when distributing 3 items.\n\n***Example 2:*** 4 items, 3 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [prob (coupon-probability 4 3)]\n  (kind/md (str \"Probability: \" (format \"%.4f\" prob))))\n```\n:::\n\n\nProbability: 0.4444\n\n**Explanation:**\n     \n- Total ways: $3^4 = 81$\n- Sum of terms: $48 + -3 + 0 = 45$ (from previous example)\n- $Probability = 1 - (45 / 81) ≈ 0.4444$\nThis means there's about a 44.44% chance of using all 3 groups having at least one item when distributing 4 items.\n\n***Example 3:*** 5 items, 5 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [prob (coupon-probability 5 5)]\n  (kind/md (str \"Probability: \" (format \"%.4f\" prob))))\n```\n:::\n\n\nProbability: 0.0384\n\n**Explanation:**\n     \n- Total ways: $5^5 = 3125$\n- Sum of terms: $5 * 4^5 - 10 * 3^5 + 10 * 2^5 - 5 * 1^5 = 3005$\n- $Probability = 1 - (3005 / 3125) ≈ 0.0384$\n     \nThis means there's about a 3.84% chance of using all 5 groups having at least one item when distributing 5 items.\n\n***Example 4:*** 10 items, 3 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [prob (coupon-probability 10 3)]\n  (kind/md (str \"Probability: \" (format \"%.4f\" prob))))\n```\n:::\n\n\nProbability: 0.9480\n\n**Explanation:**\n     \n- Total ways: $3^{10} = 59049$\n- Sum of terms: $3 * 2^{10} - 3 * 1^{10} = 3069$\n- $Probability = 1 - (3069 / 59049) ≈ 0.9480$\n     \nThis means there's about a 94.80% chance of using all 3 groups having at least one item when distributing 10 items.\n\n**4. Calculate the result for 12 calls and 7 days:**\n\n\n::: {.sourceClojure}\n```clojure\n(let [result (coupon-probability 12 7)]\n  (answer (str \"The probability of getting at least one call each day is approximately \"\n               (format \"%.4f\" result))))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**The probability of getting at least one call each day is approximately 0.2285**</span>\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw2/blob/master/src/assignments/hw2/cw6_q5.clj\">src/assignments/hw2/cw6_q5.clj</a></small></small></pre></div>\n```\n","srcMarkdownNoYaml":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw2.cw6_q5_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw2.cw6_q5_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw2.cw6-q5\n  (:require\n    [assignments.hw2.utils :refer :all]\n    [scicloj.kindly.v4.kind :as kind]))\n```\n:::\n\n\n## EXTRA: CW6 Q5\n---\n\n#### *5) Your phone rings 12 times each week, the calls being randomly distributed among 7 days. What is the probability that you get at least one call each day?*\n\nThis problem is equivalent to the Coupon collector's problem, as described in the [MathStackExchange answer](https://math.stackexchange.com/questions/2421875/what-is-the-probability-i-get-at-least-one-call-each-day-if-my-telephone-rings). It can be thought of as 'the probability that a random 12-letter word written with a 7-letter alphabet contains all 7 letters.'\n\n**1. Calculate the binomial coefficient (n choose k):**\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn nck\n    \"Calculates the binomial coefficient (n choose k) using iterative and recusive method.\n   n: total number of items\n   k: number of items to choose\"\n    [n k]\n    (if (or (< k 0) (> k n))\n      0\n      (let [k (min k (- n k))]                              ; Take advantage of symmetry\n        (loop [result 1N, i 0]\n          (if (= i k)\n            result\n            (recur\n              (/ (* result (- n i)) (inc i))\n              (inc i))))))))\n```\n:::\n\n\n**2. Calculate the inclusion-exclusion terms:**\n\n\n::: {.sourceClojure}\n```clojure\n(defn calculate-inclusion-exclusion-terms\n  \"Calculates the terms for the inclusion-exclusion principle, corresponding to the formula:\n   7^12 - (7c6)6^12 + (7c5)5^12 - (7c4)4^12 + (7c3)3^12 - (7c2)2^12 + (7c1)1^12\n   \n   num-items: Number of items to distribute (e.g., calls)\n   num-groups: Number of groups to distribute into (e.g., days)\n   \n   Returns a sequence of terms for the inclusion-exclusion sum.\"\n  [num-items num-groups]\n  (map (fn [k]\n         (let [sign (if (odd? k) 1 -1)\n               combinations (nck num-groups k)              ; This computes (7 choose k)\n               ways (Math/pow (- num-groups k) num-items)]  ; This computes (7-k)^12\n           (* sign combinations ways)))\n       (range 1 (inc num-groups))))\n```\n:::\n\n\nExplanation of `calculate-inclusion-exclusion-terms`:\n     \n1. We iterate over k from 1 to num-groups, representing the number of groups not receiving any item.\n2. For each k, we calculate:\n   - `(nck num-groups k)`: The number of ways to choose k groups out of num-groups.\n   - `(Math/pow (- num-groups k) num-items)`: The number of ways to distribute num-items to the remaining (num-groups - k) groups.\n   - `(if (odd? k) 1 -1)`: Alternating sign for the inclusion-exclusion principle.\n3. The product of these three factors gives us each term in the inclusion-exclusion sum.\n\n**Examples of `calculate-inclusion-exclusion-terms`:**\n\n***Example 1:*** 3 items, 2 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [terms (calculate-inclusion-exclusion-terms 3 2)]\n  (kind/md (str \"Terms: \" (vec terms))))\n```\n:::\n\n\nTerms: [2.0 -0.0]\n\n**Explanation:**\n- For k=1: (2 choose 1) * 1^3 * 1 = 2\n- For k=2: (2 choose 2) * 0^3 * -1 = 0\n\n These terms correspond to the inclusion-exclusion principle as described in the MathStackExchange solution. Here, we're calculating the probability of not using all groups (days/letters), which we'll later subtract from 1 to get the desired probability.\n\n***Example 2:*** 4 items, 3 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [terms (calculate-inclusion-exclusion-terms 4 3)]\n  (kind/md (str \"Terms: \" (vec terms))))\n```\n:::\n\n\nTerms: [48.0 -3.0 0.0]\n\n**Explanation:**\n     \n- For k=1: (3 choose 1) * 2^4 * 1 = 48\n- For k=2: (3 choose 2) * 1^4 * -1 = -3\n- For k=3: (3 choose 3) * 0^4 * 1 = 0\n\n These terms directly relate to the MathStackExchange solution's formula: \n$7^{12} - \\binom{7}{6}6^{12} + \\binom{7}{5}5^{12} - ... + \\binom{7}{1}1^{12}$. In our function:\n     \n- (3 choose k) corresponds to $\\binom{7}{k}$ in the solution\n- $(3-k)^4$ corresponds to $k^{12}$ in the solution (where k is the complement)\n- The alternating signs match the solution's inclusion-exclusion principle\n\nOur function generalizes this approach for any number of items (calls/letters) and groups (days/alphabet letters).\n\n**3. Calculate the probability using inclusion-exclusion:**\n\n\n::: {.sourceClojure}\n```clojure\n(defn coupon-probability\n  \"Calculates the probability that all `num-groups` (e.g., days) will be used\n   when distributing `num-items` (e.g., calls) using the inclusion-exclusion principle.\"\n  [num-items num-groups]\n  (let [terms (calculate-inclusion-exclusion-terms num-items num-groups)\n        total-ways (Math/pow num-groups num-items)\n        excluded-ways (reduce + terms)\n        probability (- 1 (/ excluded-ways total-ways))]\n    probability))\n```\n:::\n\n\nExplanation of `coupon-probability`:\n     \n1. We calculate the inclusion-exclusion terms using our `calculate-inclusion-exclusion-terms` function.\n2. total-ways represents the total number of ways to distribute num-items among num-groups.\n3. We sum up the terms and divide by total-ways to get the probability of not using all groups.\n4. Finally, we subtract this from 1 to get the probability of using all groups.\n\nExamples of `coupon-probability`:\n\n***Example 1:*** 3 items, 2 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [prob (coupon-probability 3 2)]\n  (kind/md (str \"Probability: \" (format \"%.4f\" prob))))\n```\n:::\n\n\nProbability: 0.7500\n\n**Explanation:**\n     \n- Total ways: $2^3 = 8$\n- Sum of terms: 2 (from previous example)\n- $Probability = 1 - (2 / 8) = 0.75$\nThis means there's a 75% chance of using both groups having at least one item when distributing 3 items.\n\n***Example 2:*** 4 items, 3 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [prob (coupon-probability 4 3)]\n  (kind/md (str \"Probability: \" (format \"%.4f\" prob))))\n```\n:::\n\n\nProbability: 0.4444\n\n**Explanation:**\n     \n- Total ways: $3^4 = 81$\n- Sum of terms: $48 + -3 + 0 = 45$ (from previous example)\n- $Probability = 1 - (45 / 81) ≈ 0.4444$\nThis means there's about a 44.44% chance of using all 3 groups having at least one item when distributing 4 items.\n\n***Example 3:*** 5 items, 5 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [prob (coupon-probability 5 5)]\n  (kind/md (str \"Probability: \" (format \"%.4f\" prob))))\n```\n:::\n\n\nProbability: 0.0384\n\n**Explanation:**\n     \n- Total ways: $5^5 = 3125$\n- Sum of terms: $5 * 4^5 - 10 * 3^5 + 10 * 2^5 - 5 * 1^5 = 3005$\n- $Probability = 1 - (3005 / 3125) ≈ 0.0384$\n     \nThis means there's about a 3.84% chance of using all 5 groups having at least one item when distributing 5 items.\n\n***Example 4:*** 10 items, 3 groups\n\n\n::: {.sourceClojure}\n```clojure\n(let [prob (coupon-probability 10 3)]\n  (kind/md (str \"Probability: \" (format \"%.4f\" prob))))\n```\n:::\n\n\nProbability: 0.9480\n\n**Explanation:**\n     \n- Total ways: $3^{10} = 59049$\n- Sum of terms: $3 * 2^{10} - 3 * 1^{10} = 3069$\n- $Probability = 1 - (3069 / 59049) ≈ 0.9480$\n     \nThis means there's about a 94.80% chance of using all 3 groups having at least one item when distributing 10 items.\n\n**4. Calculate the result for 12 calls and 7 days:**\n\n\n::: {.sourceClojure}\n```clojure\n(let [result (coupon-probability 12 7)]\n  (answer (str \"The probability of getting at least one call each day is approximately \"\n               (format \"%.4f\" result))))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**The probability of getting at least one call each day is approximately 0.2285**</span>\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw2/blob/master/src/assignments/hw2/cw6_q5.clj\">src/assignments/hw2/cw6_q5.clj</a></small></small></pre></div>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":false,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"output-file":"assignments.hw2.cw6_q5.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","fontsize":"0.9em","code-block-background":true,"toc-title-numbers":false,"number-depth":0},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}